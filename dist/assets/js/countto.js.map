{"version":3,"names":[],"mappings":"","sources":["countto.js"],"sourcesContent":["//----APPEAR---//\n!function(e){function r(){n=!1;for(var r=0;r<i.length;r++){var a=e(i[r]).filter(function(){return e(this).is(\":appeared\")});if(a.trigger(\"appear\",[a]),t){var o=t.not(a);o.trigger(\"disappear\",[o])}t=a}}var t,i=[],a=!1,n=!1,o={interval:250,force_process:!1},f=e(window);e.expr[\":\"].appeared=function(r){var t=e(r);if(!t.is(\":visible\"))return!1;var i=f.scrollLeft(),a=f.scrollTop(),n=t.offset(),o=n.left,p=n.top;return p+t.height()>=a&&p-(t.data(\"appear-top-offset\")||0)<=a+f.height()&&o+t.width()>=i&&o-(t.data(\"appear-left-offset\")||0)<=i+f.width()?!0:!1},e.fn.extend({appear:function(t){var f=e.extend({},o,t||{}),p=this.selector||this;if(!a){var s=function(){n||(n=!0,setTimeout(r,f.interval))};e(window).scroll(s).resize(s),a=!0}return f.force_process&&setTimeout(r,f.interval),i.push(p),e(p)}}),e.extend({force_appear:function(){return a?(r(),!0):!1}})}(jQuery);\n\n\n\n(function ($) {\n\t$.fn.countTo = function (options) {\n\t\toptions = options || {};\n\n\t\treturn $(this).each(function () {\n\t\t\t// set options for current element\n\t\t\tvar settings = $.extend({}, $.fn.countTo.defaults, {\n\t\t\t\tfrom:            $(this).data('from'),\n\t\t\t\tto:              $(this).data('to'),\n\t\t\t\tspeed:           $(this).data('speed'),\n\t\t\t\trefreshInterval: $(this).data('refresh-interval'),\n\t\t\t\tdecimals:        $(this).data('decimals')\n\t\t\t}, options);\n\n\t\t\t// how many times to update the value, and how much to increment the value on each update\n\t\t\tvar loops = Math.ceil(settings.speed / settings.refreshInterval),\n\t\t\t\tincrement = (settings.to - settings.from) / loops;\n\n\t\t\t// references & variables that will change with each update\n\t\t\tvar self = this,\n\t\t\t\t$self = $(this),\n\t\t\t\tloopCount = 0,\n\t\t\t\tvalue = settings.from,\n\t\t\t\tdata = $self.data('countTo') || {};\n\n\t\t\t$self.data('countTo', data);\n\n\t\t\t// if an existing interval can be found, clear it first\n\t\t\tif (data.interval) {\n\t\t\t\tclearInterval(data.interval);\n\t\t\t}\n\t\t\tdata.interval = setInterval(updateTimer, settings.refreshInterval);\n\n\t\t\t// initialize the element with the starting value\n\t\t\trender(value);\n\n\t\t\tfunction updateTimer() {\n\t\t\t\tvalue += increment;\n\t\t\t\tloopCount++;\n\n\t\t\t\trender(value);\n\n\t\t\t\tif (typeof(settings.onUpdate) == 'function') {\n\t\t\t\t\tsettings.onUpdate.call(self, value);\n\t\t\t\t}\n\n\t\t\t\tif (loopCount >= loops) {\n\t\t\t\t\t// remove the interval\n\t\t\t\t\t$self.removeData('countTo');\n\t\t\t\t\tclearInterval(data.interval);\n\t\t\t\t\tvalue = settings.to;\n\n\t\t\t\t\tif (typeof(settings.onComplete) == 'function') {\n\t\t\t\t\t\tsettings.onComplete.call(self, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction render(value) {\n\t\t\t\tvar formattedValue = settings.formatter.call(self, value, settings);\n\t\t\t\t$self.text(formattedValue);\n\t\t\t}\n\t\t});\n\t};\n\n\t$.fn.countTo.defaults = {\n\t\tfrom: 0,               // the number the element should start at\n\t\tto: 0,                 // the number the element should end at\n\t\tspeed: 1000,           // how long it should take to count between the target numbers\n\t\trefreshInterval: 100,  // how often the element should be updated\n\t\tdecimals: 0,           // the number of decimal places to show\n\t\tformatter: formatter,  // handler for formatting the value before rendering\n\t\tonUpdate: null,        // callback method for every time the element is updated\n\t\tonComplete: null       // callback method for when the element finishes updating\n\t};\n\n\tfunction formatter(value, settings) {\n\t\treturn value.toFixed(settings.decimals);\n\t}\n}(jQuery));\n\n\n\n//counters init on scroll\n\tif (jQuery().appear) {\n\t\tjQuery('.counter').appear();\n\t\tjQuery('body').on('appear', '.counter', function(e, $affected ) {\n\t\t\tjQuery($affected).each(function(index){\n\t\t\t\tif (jQuery(this).hasClass('counted')) {\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tjQuery(this).countTo().addClass('counted');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t});\n\t\t});\n\t}"],"file":"countto.js","sourceRoot":"/source/"}